(self.webpackChunkscriptcat_org=self.webpackChunkscriptcat_org||[]).push([[188],{493:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-4a914b38",path:"/dev/cron.html",title:"定时脚本",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"Crontab 例子",slug:"crontab-例子",children:[]},{level:3,title:"Promise",slug:"promise",children:[]}],filePathRelative:"dev/cron.md",git:{updatedTime:1623727254e3,contributors:[]}}},4420:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>b});var e=a(6252);const p=(0,e.Wm)("h1",{id:"定时脚本"},[(0,e.Wm)("a",{class:"header-anchor",href:"#定时脚本"},"#"),(0,e.Uk)(" 定时脚本")],-1),t=(0,e.Wm)("p",null,[(0,e.Uk)("定时脚本由"),(0,e.Wm)("code",null,"@crontab"),(0,e.Uk)("属性声明,可以精确到秒级调用,提供了一个"),(0,e.Wm)("code",null,"once"),(0,e.Uk)("参数,表示某个时间内最多执行一次(考虑浏览器未打开的情况).建议脚本的运行时间和重试时间不要大于定时时间的间隔.")],-1),c=(0,e.Uk)("可使用在线工具测试crontab表达式,扩展中的"),o=(0,e.Wm)("code",null,"once",-1),l=(0,e.Uk)("替换成"),r=(0,e.Wm)("code",null,"*",-1),u=(0,e.Uk)(":"),i={href:"https://tool.lu/crontab/",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("crontab在线测试"),k=(0,e.uE)('<p>在控制台页面,鼠标放置<code>运行状态</code>栏时会显示下一次的运行时间.</p><h3 id="crontab-例子"><a class="header-anchor" href="#crontab-例子">#</a> Crontab 例子</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//@crontab * * * * * * 每秒运行一次</span>\n<span class="token comment">//@crontab * * * * * 每分钟运行一次</span>\n<span class="token comment">//@crontab 0 */6 * * * 每6小时执行一次</span>\n<span class="token comment">//@crontab 15 */6 * * * 每6小时的15分时执行一次</span>\n<span class="token comment">//@crontab * once * * * 每小时最多运行一次</span>\n<span class="token comment">//@crontab * * once * * 每天最多运行一次(当天首次打开浏览器时运行)</span>\n<span class="token comment">//@crontab * 10 once * * 每天10点检测运行一次(浏览器在10点时打开会运行,当天11点以后不会再运行脚本)</span>\n<span class="token comment">//@crontab * 10-23 once * * 每天10点后开始检测运行一次(浏览器在10点后打开,当天11点以后依旧会检测运行)</span>\n<span class="token comment">//@crontab * once 13 * * 每个月13号中的每小时最多运行一次</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="promise"><a class="header-anchor" href="#promise">#</a> Promise</h3><blockquote><p>大力推荐这种写法,也便于脚本管理器的脚本监控</p></blockquote><p>脚本返回<code>Promise</code>对象,管理器可以将返回的内容当作日志记录下来. 在<code>crontab</code>的<code>once</code>中,<code>reject</code>的第二个参数将会作为延迟重试执行的时间来处理,单位为秒.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// ==UserScript==</span>\n<span class="token comment">// @name         Promise测试demo</span>\n<span class="token comment">// @namespace    wyz</span>\n<span class="token comment">// @version      1.0.0</span>\n<span class="token comment">// @author       wyz</span>\n<span class="token comment">// @crontab * * * * *</span>\n<span class="token comment">// ==/UserScript==</span>\n<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记录成功</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记录错误信息,并10秒后重试</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',7),b={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,t,(0,e.Wm)("p",null,[c,o,l,r,u,(0,e.Wm)("a",i,[m,(0,e.Wm)(a)])]),k],64)}}}}]);