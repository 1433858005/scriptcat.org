(self.webpackChunkscriptcat_org=self.webpackChunkscriptcat_org||[]).push([[188],{493:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-4a914b38",path:"/dev/cron.html",title:"定时脚本",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"Crontab 例子",slug:"crontab-例子",children:[]},{level:3,title:"Promise",slug:"promise",children:[]}],filePathRelative:"dev/cron.md",git:{updatedTime:1622043305e3,contributors:[]}}},1926:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="定时脚本"><a class="header-anchor" href="#定时脚本">#</a> 定时脚本</h1><p>定时脚本由<code>@crontab</code>属性声明,可以精确到秒级调用,提供了一个<code>once</code>,表示某个时间内最多执行一次(考虑浏览器未打开的情况).建议脚本的运行时间不要大于定时时间的间隔.</p><p>可使用在线工具测试:https://tool.lu/crontab/</p><h3 id="crontab-例子"><a class="header-anchor" href="#crontab-例子">#</a> Crontab 例子</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//@crontab * * * * * * 每秒运行一次</span>\n<span class="token comment">//@crontab * * * * * 每分钟运行一次</span>\n<span class="token comment">//@crontab 0 */6 * * * 每6小时执行一次</span>\n<span class="token comment">//@crontab 15 */6 * * * 每6小时的15分执行一次</span>\n<span class="token comment">//@crontab * once * * * 每小时最多运行一次</span>\n<span class="token comment">//@crontab * * once * * 每天最多运行一次</span>\n<span class="token comment">//@crontab * once 13 * * 每个月13号中的每小时最多运行一次</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="promise"><a class="header-anchor" href="#promise">#</a> Promise</h3><blockquote><p>十分推荐这种写法,也便于脚本管理器的脚本监控</p></blockquote><p>脚本返回<code>Promise</code>对象,管理器可以将返回的内容当作日志记录下来. 在<code>crontab</code>的<code>once</code>中,<code>reject</code>的第二个参数将会作为延迟重试执行的时间来处理,单位为秒.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// ==UserScript==</span>\n<span class="token comment">// @name         Promise测试demo</span>\n<span class="token comment">// @namespace    wyz</span>\n<span class="token comment">// @version      1.0.0</span>\n<span class="token comment">// @author       wyz</span>\n<span class="token comment">// @crontab * * * * *</span>\n<span class="token comment">// ==/UserScript==</span>\n<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',9),p={render:function(n,s){return e}}}}]);